#!/usr/bin/env python
"""
恶意软件分析沙箱
动态和静态恶意软件分析平台
集成多种分析工具和威胁情报
"""

import os
import json
import time
import hashlib
import random
import sqlite3
import subprocess
import threading
from datetime import datetime
from flask import Flask, request, render_template_string, jsonify, send_file
import zipfile
import tempfile
import shutil

class MalwareSandbox:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.samples_dir = os.path.join(self.base_dir, "samples")
        self.reports_dir = os.path.join(self.base_dir, "reports")
        self.quarantine_dir = os.path.join(self.base_dir, "quarantine")
        
        os.makedirs(self.samples_dir, exist_ok=True)
        os.makedirs(self.reports_dir, exist_ok=True)
        os.makedirs(self.quarantine_dir, exist_ok=True)
        
        self.setup_database()
        self.create_sample_malware()
        
    def setup_database(self):
        """初始化恶意软件分析数据库"""
        conn = sqlite3.connect('malware_analysis.db')
        cursor = conn.cursor()
        
        # 样本分析表
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS malware_samples (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filename TEXT NOT NULL,
                md5_hash TEXT NOT NULL,
                sha1_hash TEXT NOT NULL,
                sha256_hash TEXT NOT NULL,
                file_size INTEGER,
                file_type TEXT,
                submission_time TEXT NOT NULL,
                analysis_status TEXT DEFAULT 'pending',
                threat_level TEXT DEFAULT 'unknown',
                family TEXT,
                capabilities TEXT,
                network_behavior TEXT,
                file_operations TEXT,
                registry_operations TEXT,
                process_operations TEXT
            )
        ''')
        
        # 威胁情报表
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS threat_intelligence (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                hash_value TEXT NOT NULL,
                threat_name TEXT,
                family TEXT,
                source TEXT,
                description TEXT,
                iocs TEXT,
                ttps TEXT,
                update_time TEXT NOT NULL
            )
        ''')
        
        # 动态分析结果表
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS dynamic_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sample_id INTEGER,
                execution_time INTEGER,
                cpu_usage REAL,
                memory_usage REAL,
                network_connections TEXT,
                dns_queries TEXT,
                file_modifications TEXT,
                registry_modifications TEXT,
                api_calls TEXT,
                screenshots TEXT,
                FOREIGN KEY (sample_id) REFERENCES malware_samples (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def create_sample_malware(self):
        """创建示例恶意软件样本(仅用于演示)"""
        samples = [
            {
                "filename": "invoice.exe",
                "content": b"MZ\x90\x00" + b"FAKE_PE_HEADER" + b"\x00" * 100,
                "family": "TrickBot",
                "threat_level": "HIGH"
            },
            {
                "filename": "document.pdf.exe", 
                "content": b"%PDF-1.4" + b"FAKE_PDF_MALWARE" + b"\x00" * 150,
                "family": "Emotet",
                "threat_level": "CRITICAL"
            },
            {
                "filename": "photo.jpg.scr",
                "content": b"\xFF\xD8\xFF\xE0" + b"FAKE_IMAGE_MALWARE" + b"\x00" * 80,
                "family": "Ransomware",
                "threat_level": "CRITICAL"
            }
        ]
        
        for sample in samples:
            sample_path = os.path.join(self.samples_dir, sample["filename"])
            if not os.path.exists(sample_path):
                with open(sample_path, 'wb') as f:
                    f.write(sample["content"])

app = Flask(__name__)
sandbox = MalwareSandbox()

# 恶意软件分析沙箱页面模板
SANDBOX_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>恶意软件分析沙箱</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #1a1a1a; color: #e0e0e0; }
        .header { background: #2c1810; color: #ff9800; padding: 20px; margin: -20px -20px 20px -20px; border-bottom: 3px solid #ff5722; }
        .container { max-width: 1400px; margin: 0 auto; }
        .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
        .full-width { grid-column: 1 / -1; }
        .panel { background: #2a2a2a; padding: 20px; border-radius: 10px; border: 1px solid #444; }
        .upload-zone { border: 2px dashed #ff5722; padding: 40px; text-align: center; background: #2c1810; border-radius: 10px; cursor: pointer; transition: all 0.3s; }
        .upload-zone:hover { background: #3c2820; border-color: #ff9800; }
        .sample-item { background: #3a3a3a; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #666; }
        .threat-high { border-left-color: #ff5722; }
        .threat-critical { border-left-color: #d32f2f; }
        .threat-medium { border-left-color: #ff9800; }
        .threat-low { border-left-color: #4caf50; }
        .btn { background: #ff5722; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #ff3d00; }
        .btn-analyze { background: #2196f3; }
        .btn-download { background: #4caf50; }
        .btn-quarantine { background: #f44336; }
        .analysis-result { background: #1e1e1e; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 12px; margin: 10px 0; }
        .ioc-item { background: #3c2415; padding: 8px; margin: 5px 0; border-radius: 3px; font-family: monospace; }
        .capability-tag { display: inline-block; background: #ff5722; color: white; padding: 3px 8px; border-radius: 3px; margin: 2px; font-size: 11px; }
        .progress-bar { background: #333; height: 20px; border-radius: 10px; overflow: hidden; margin: 10px 0; }
        .progress-fill { background: linear-gradient(90deg, #ff5722, #ff9800); height: 100%; transition: width 1s; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 20px; }
        .stat-card { background: #3a3a3a; padding: 15px; border-radius: 5px; text-align: center; }
        .stat-value { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
        .stat-label { font-size: 12px; opacity: 0.8; }
        .network-graph { background: #1e1e1e; padding: 20px; border-radius: 5px; height: 300px; overflow: auto; }
        .file-hash { font-family: monospace; font-size: 11px; color: #ff9800; word-break: break-all; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🦠 恶意软件分析沙箱</h1>
            <p>高级恶意软件动态分析和威胁情报平台</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" style="color: #ff5722;">{{ stats.total_samples }}</div>
                <div class="stat-label">样本总数</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" style="color: #d32f2f;">{{ stats.critical_threats }}</div>
                <div class="stat-label">严重威胁</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" style="color: #ff9800;">{{ stats.families_detected }}</div>
                <div class="stat-label">恶意软件家族</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" style="color: #4caf50;">{{ stats.analyzed_samples }}</div>
                <div class="stat-label">已分析样本</div>
            </div>
        </div>
        
        <div class="grid">
            <div class="panel">
                <h3>📁 样本上传</h3>
                <div class="upload-zone" onclick="document.getElementById('file-input').click()">
                    <h4>拖拽文件到此处或点击上传</h4>
                    <p>支持: EXE, DLL, PDF, DOC, ZIP等格式</p>
                    <p>最大文件大小: 100MB</p>
                </div>
                <input type="file" id="file-input" style="display: none;" onchange="uploadSample(this)">
                
                <h4>🧪 快速测试样本</h4>
                <button class="btn" onclick="generateSample('trojan')">生成木马样本</button>
                <button class="btn" onclick="generateSample('ransomware')">生成勒索软件</button>
                <button class="btn" onclick="generateSample('banker')">生成银行木马</button>
            </div>
            
            <div class="panel">
                <h3>🔍 样本分析队列</h3>
                <div id="sample-queue">
                    {% for sample in samples %}
                    <div class="sample-item threat-{{ sample.threat_level.lower() }}">
                        <strong>{{ sample.filename }}</strong>
                        <span style="float: right; color: #ff9800;">{{ sample.threat_level }}</span>
                        <br><div class="file-hash">MD5: {{ sample.md5_hash }}</div>
                        <div style="margin-top: 8px;">
                            <button class="btn btn-analyze" onclick="analyzeSample({{ sample.id }})">🔬 分析</button>
                            <button class="btn btn-download" onclick="downloadReport({{ sample.id }})">📊 报告</button>
                            <button class="btn btn-quarantine" onclick="quarantineSample({{ sample.id }})">🔒 隔离</button>
                        </div>
                        {% if sample.analysis_status == 'analyzing' %}
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 60%"></div>
                        </div>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
        
        <div class="grid">
            <div class="panel">
                <h3>🧬 动态分析结果</h3>
                <div id="analysis-results">
                    <div class="analysis-result">
                        <strong>行为分析:</strong><br>
                        ✓ 检测到进程注入行为<br>
                        ✓ 发现网络通信活动<br>
                        ✓ 检测到注册表修改<br>
                        ✓ 发现文件加密行为<br>
                        ⚠️ 检测到反虚拟机技术
                    </div>
                    
                    <h4>🌐 网络活动</h4>
                    <div class="network-graph">
                        <div class="ioc-item">DNS查询: evil-c2.darkweb.com</div>
                        <div class="ioc-item">HTTP POST: 185.159.157.131:8080/gate.php</div>
                        <div class="ioc-item">TCP连接: 91.219.29.81:443 (TLS)</div>
                        <div class="ioc-item">下载文件: http://malicious.site/payload.exe</div>
                    </div>
                    
                    <h4>🏷️ 检测到的能力</h4>
                    <div>
                        <span class="capability-tag">文件加密</span>
                        <span class="capability-tag">进程注入</span>
                        <span class="capability-tag">反调试</span>
                        <span class="capability-tag">键盘记录</span>
                        <span class="capability-tag">屏幕截图</span>
                        <span class="capability-tag">凭证窃取</span>
                    </div>
                </div>
            </div>
            
            <div class="panel">
                <h3>🛡️ 威胁情报</h3>
                <div class="analysis-result">
                    <strong>恶意软件家族:</strong> TrickBot<br>
                    <strong>变种:</strong> TrickBot.Variant.2024<br>
                    <strong>首次发现:</strong> 2024-01-15<br>
                    <strong>活跃状态:</strong> 高活跃度<br>
                    <strong>目标:</strong> 金融机构, 企业网络
                </div>
                
                <h4>🎯 MITRE ATT&CK 映射</h4>
                <div class="analysis-result">
                    T1055 - 进程注入<br>
                    T1071 - 应用层协议<br>
                    T1083 - 文件和目录发现<br>
                    T1105 - 入侵工具传输<br>
                    T1486 - 数据加密影响<br>
                    T1547 - 启动或登录自启动执行
                </div>
                
                <h4>🔍 IOCs (威胁指标)</h4>
                <div>
                    <div class="ioc-item">MD5: a1b2c3d4e5f6789012345678901234567</div>
                    <div class="ioc-item">域名: evil-command.darknet.org</div>
                    <div class="ioc-item">IP: 91.219.29.81</div>
                    <div class="ioc-item">文件路径: %TEMP%\\svchost.exe</div>
                    <div class="ioc-item">注册表: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</div>
                </div>
            </div>
        </div>
        
        <div class="panel full-width">
            <h3>📊 实时分析监控</h3>
            <div style="height: 300px;">
                <canvas id="analysisChart" width="800" height="300"></canvas>
            </div>
        </div>
    </div>
    
    <script>
        function uploadSample(input) {
            const file = input.files[0];
            if (!file) return;
            
            const formData = new FormData();
            formData.append('sample', file);
            
            fetch('/api/upload_sample', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('样本上传成功: ' + data.filename);
                    location.reload();
                } else {
                    alert('上传失败: ' + data.error);
                }
            })
            .catch(error => {
                alert('上传错误: ' + error);
            });
        }
        
        function generateSample(type) {
            fetch('/api/generate_sample', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ type: type })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('已生成测试样本: ' + data.filename);
                    location.reload();
                } else {
                    alert('生成失败: ' + data.error);
                }
            });
        }
        
        function analyzeSample(sampleId) {
            fetch('/api/analyze_sample', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ sample_id: sampleId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('开始分析样本...');
                    // 显示进度条
                    updateAnalysisProgress(sampleId);
                } else {
                    alert('分析失败: ' + data.error);
                }
            });
        }
        
        function updateAnalysisProgress(sampleId) {
            // 模拟分析进度
            let progress = 0;
            const interval = setInterval(() => {
                progress += 10;
                if (progress <= 100) {
                    // 更新进度条
                    console.log('分析进度: ' + progress + '%');
                } else {
                    clearInterval(interval);
                    alert('分析完成!');
                    location.reload();
                }
            }, 1000);
        }
        
        function downloadReport(sampleId) {
            window.open('/api/download_report/' + sampleId, '_blank');
        }
        
        function quarantineSample(sampleId) {
            if (confirm('确定要隔离此样本吗？隔离后将无法恢复。')) {
                fetch('/api/quarantine_sample', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sample_id: sampleId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('样本已隔离');
                        location.reload();
                    } else {
                        alert('隔离失败: ' + data.error);
                    }
                });
            }
        }
        
        // 定时更新统计数据
        setInterval(() => {
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.querySelectorAll('.stat-value').forEach((elem, index) => {
                        const values = [data.total_samples, data.critical_threats, data.families_detected, data.analyzed_samples];
                        if (values[index] !== undefined) {
                            elem.textContent = values[index];
                        }
                    });
                });
        }, 10000);
    </script>
</body>
</html>
"""

@app.route('/')
def sandbox_dashboard():
    """恶意软件分析沙箱主界面"""
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    # 获取样本列表
    cursor.execute('''
        SELECT id, filename, md5_hash, threat_level, analysis_status, family 
        FROM malware_samples 
        ORDER BY submission_time DESC
    ''')
    
    samples = []
    for row in cursor.fetchall():
        samples.append({
            'id': row[0],
            'filename': row[1],
            'md5_hash': row[2][:16] + '...',
            'threat_level': row[3] or 'UNKNOWN',
            'analysis_status': row[4],
            'family': row[5] or 'Unknown'
        })
    
    # 统计数据
    cursor.execute('SELECT COUNT(*) FROM malware_samples')
    total_samples = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM malware_samples WHERE threat_level = "CRITICAL"')
    critical_threats = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(DISTINCT family) FROM malware_samples WHERE family IS NOT NULL')
    families_detected = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM malware_samples WHERE analysis_status = "completed"')
    analyzed_samples = cursor.fetchone()[0]
    
    stats = {
        'total_samples': total_samples,
        'critical_threats': critical_threats,
        'families_detected': families_detected,
        'analyzed_samples': analyzed_samples
    }
    
    conn.close()
    
    return render_template_string(SANDBOX_TEMPLATE, samples=samples, stats=stats)

@app.route('/api/upload_sample', methods=['POST'])
def upload_sample():
    """上传恶意软件样本"""
    if 'sample' not in request.files:
        return jsonify({"success": False, "error": "未选择文件"})
    
    file = request.files['sample']
    if file.filename == '':
        return jsonify({"success": False, "error": "未选择文件"})
    
    # 保存文件
    filename = file.filename
    file_path = os.path.join(sandbox.samples_dir, filename)
    file.save(file_path)
    
    # 计算哈希值
    with open(file_path, 'rb') as f:
        file_content = f.read()
        md5_hash = hashlib.md5(file_content).hexdigest()
        sha1_hash = hashlib.sha1(file_content).hexdigest()
        sha256_hash = hashlib.sha256(file_content).hexdigest()
    
    # 保存到数据库
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO malware_samples (filename, md5_hash, sha1_hash, sha256_hash, file_size, submission_time)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (filename, md5_hash, sha1_hash, sha256_hash, len(file_content), datetime.now().isoformat()))
    
    conn.commit()
    conn.close()
    
    return jsonify({"success": True, "filename": filename, "md5": md5_hash})

@app.route('/api/generate_sample', methods=['POST'])
def generate_sample():
    """生成测试恶意软件样本"""
    data = request.json
    sample_type = data.get('type', 'generic')
    
    # 生成模拟样本
    sample_templates = {
        'trojan': {
            'filename': f'update_{random.randint(1000,9999)}.exe',
            'content': b'MZ' + b'TROJAN_SIMULATOR' + b'\x00' * 200,
            'family': 'GenericTrojan',
            'threat_level': 'HIGH'
        },
        'ransomware': {
            'filename': f'document_{random.randint(1000,9999)}.pdf.exe',
            'content': b'%PDF' + b'RANSOMWARE_SIMULATOR' + b'\x00' * 300,
            'family': 'CryptoLocker',
            'threat_level': 'CRITICAL'
        },
        'banker': {
            'filename': f'banking_app_{random.randint(1000,9999)}.exe',
            'content': b'MZ' + b'BANKER_SIMULATOR' + b'\x00' * 250,
            'family': 'BankingTrojan',
            'threat_level': 'HIGH'
        }
    }
    
    template = sample_templates.get(sample_type, sample_templates['trojan'])
    
    # 保存样本文件
    file_path = os.path.join(sandbox.samples_dir, template['filename'])
    with open(file_path, 'wb') as f:
        f.write(template['content'])
    
    # 计算哈希
    md5_hash = hashlib.md5(template['content']).hexdigest()
    sha1_hash = hashlib.sha1(template['content']).hexdigest()
    sha256_hash = hashlib.sha256(template['content']).hexdigest()
    
    # 保存到数据库
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO malware_samples (filename, md5_hash, sha1_hash, sha256_hash, file_size, submission_time, threat_level, family)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (template['filename'], md5_hash, sha1_hash, sha256_hash, 
          len(template['content']), datetime.now().isoformat(),
          template['threat_level'], template['family']))
    
    conn.commit()
    conn.close()
    
    return jsonify({"success": True, "filename": template['filename']})

@app.route('/api/analyze_sample', methods=['POST'])
def analyze_sample():
    """分析恶意软件样本"""
    data = request.json
    sample_id = data.get('sample_id')
    
    # 模拟分析过程
    def simulate_analysis():
        time.sleep(2)  # 模拟分析时间
        
        conn = sqlite3.connect('malware_analysis.db')
        cursor = conn.cursor()
        
        # 更新分析状态
        cursor.execute('''
            UPDATE malware_samples 
            SET analysis_status = 'completed',
                capabilities = 'file_encryption,process_injection,anti_debug',
                network_behavior = 'c2_communication,data_exfiltration',
                file_operations = 'create_files,modify_registry',
                process_operations = 'inject_explorer,create_service'
            WHERE id = ?
        ''', (sample_id,))
        
        # 添加动态分析结果
        cursor.execute('''
            INSERT INTO dynamic_analysis (
                sample_id, execution_time, cpu_usage, memory_usage,
                network_connections, dns_queries, file_modifications
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (sample_id, 120, 45.5, 128.0,
              'tcp:91.219.29.81:443,tcp:185.159.157.131:8080',
              'evil-c2.darkweb.com,malicious.site',
              '%TEMP%\\svchost.exe,%APPDATA%\\update.dat'))
        
        conn.commit()
        conn.close()
    
    # 在后台线程中运行分析
    analysis_thread = threading.Thread(target=simulate_analysis)
    analysis_thread.start()
    
    # 立即更新状态为正在分析
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE malware_samples SET analysis_status = "analyzing" WHERE id = ?', (sample_id,))
    conn.commit()
    conn.close()
    
    return jsonify({"success": True, "message": "分析已开始"})

@app.route('/api/download_report/<int:sample_id>')
def download_report(sample_id):
    """下载分析报告"""
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    # 获取样本信息
    cursor.execute('SELECT * FROM malware_samples WHERE id = ?', (sample_id,))
    sample = cursor.fetchone()
    
    # 获取动态分析结果
    cursor.execute('SELECT * FROM dynamic_analysis WHERE sample_id = ?', (sample_id,))
    analysis = cursor.fetchone()
    
    conn.close()
    
    if not sample:
        return "样本不存在", 404
    
    # 生成JSON报告
    report = {
        "sample_info": {
            "filename": sample[1],
            "md5": sample[2],
            "sha1": sample[3],
            "sha256": sample[4],
            "file_size": sample[5],
            "submission_time": sample[7],
            "threat_level": sample[9] or "UNKNOWN"
        },
        "static_analysis": {
            "file_type": sample[6] or "PE32",
            "family": sample[10] or "Unknown",
            "capabilities": sample[11] or "",
            "threat_score": random.randint(70, 95)
        },
        "dynamic_analysis": {
            "execution_time": analysis[2] if analysis else 0,
            "cpu_usage": analysis[3] if analysis else 0,
            "memory_usage": analysis[4] if analysis else 0,
            "network_connections": analysis[5] if analysis else "",
            "dns_queries": analysis[6] if analysis else "",
            "file_modifications": analysis[7] if analysis else ""
        },
        "mitre_attack": [
            "T1055 - Process Injection",
            "T1071 - Application Layer Protocol", 
            "T1486 - Data Encrypted for Impact"
        ],
        "iocs": [
            {"type": "md5", "value": sample[2]},
            {"type": "domain", "value": "evil-c2.darkweb.com"},
            {"type": "ip", "value": "91.219.29.81"}
        ]
    }
    
    # 保存报告文件
    report_path = os.path.join(sandbox.reports_dir, f"report_{sample_id}.json")
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    return send_file(report_path, as_attachment=True, download_name=f"malware_report_{sample_id}.json")

@app.route('/api/quarantine_sample', methods=['POST'])
def quarantine_sample():
    """隔离恶意软件样本"""
    data = request.json
    sample_id = data.get('sample_id')
    
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    # 获取样本信息
    cursor.execute('SELECT filename FROM malware_samples WHERE id = ?', (sample_id,))
    result = cursor.fetchone()
    
    if result:
        filename = result[0]
        
        # 移动文件到隔离区
        source_path = os.path.join(sandbox.samples_dir, filename)
        quarantine_path = os.path.join(sandbox.quarantine_dir, f"quarantined_{sample_id}_{filename}")
        
        if os.path.exists(source_path):
            shutil.move(source_path, quarantine_path)
        
        # 更新数据库状态
        cursor.execute('UPDATE malware_samples SET analysis_status = "quarantined" WHERE id = ?', (sample_id,))
        conn.commit()
        conn.close()
        
        return jsonify({"success": True, "message": "样本已隔离"})
    
    conn.close()
    return jsonify({"success": False, "error": "样本不存在"})

@app.route('/api/stats')
def get_stats():
    """获取统计数据"""
    conn = sqlite3.connect('malware_analysis.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM malware_samples')
    total_samples = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM malware_samples WHERE threat_level = "CRITICAL"')
    critical_threats = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(DISTINCT family) FROM malware_samples WHERE family IS NOT NULL')
    families_detected = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM malware_samples WHERE analysis_status = "completed"')
    analyzed_samples = cursor.fetchone()[0]
    
    conn.close()
    
    return jsonify({
        "total_samples": total_samples,
        "critical_threats": critical_threats,
        "families_detected": families_detected,
        "analyzed_samples": analyzed_samples
    })

if __name__ == '__main__':
    print("🦠 启动恶意软件分析沙箱...")
    print("访问 http://localhost:5005 开始恶意软件分析")
    print("")
    print("🔬 支持功能:")
    print("  - 样本上传和管理")
    print("  - 动态行为分析")
    print("  - 威胁情报集成")
    print("  - MITRE ATT&CK映射")
    print("  - 自动化报告生成")
    print("  - 样本隔离管理")
    
    app.run(host='0.0.0.0', port=5005, debug=True)
